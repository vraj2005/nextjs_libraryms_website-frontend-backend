// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  username     String   @unique
  password     String
  firstName    String
  lastName     String
  phone        String?  // Phone number field
  address      String?  // Address field
  role         UserRole @default(USER)
  profileImage String? // Base64 encoded image
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  borrowRequests BorrowRequest[]
  notifications  Notification[]
  fines          Fine[]
  history        UserHistory[]
}

model Book {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  isbn            String   @unique // Auto-generated valid ISBN-13
  title           String
  author          String
  description     String?
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String   @db.ObjectId
  image           String? // Base64 encoded image
  totalCopies     Int      @default(1)
  availableCopies Int      @default(1)
  publishedYear   Int?
  publisher       String?
  isActive        Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  borrowRequests BorrowRequest[]
  bookHistory    BookHistory[]
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  image       String? // Base64 encoded category image
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  books Book[]
}

// Borrowing System
model BorrowRequest {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.ObjectId
  book         Book          @relation(fields: [bookId], references: [id])
  bookId       String        @db.ObjectId
  status       RequestStatus @default(PENDING)
  requestDate  DateTime      @default(now())
  approvedDate DateTime?
  dueDate      DateTime?
  returnDate   DateTime?
  approvedBy   String?       @db.ObjectId
  notes        String?

  fines Fine[]
}

// Fine Management
model Fine {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @db.ObjectId
  borrowRequest   BorrowRequest @relation(fields: [borrowRequestId], references: [id])
  borrowRequestId String        @db.ObjectId
  amount          Float
  daysOverdue     Int
  isPaid          Boolean       @default(false)
  paidDate        DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Notification System
model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @db.ObjectId
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdBy String?          @db.ObjectId // Admin who sent custom notification
  createdAt DateTime         @default(now())
}

// History Tracking
model UserHistory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  action      String // "BORROWED", "RETURNED", "FINE_PAID", etc.
  description String
  metadata    String? // JSON string for additional data
  timestamp   DateTime @default(now())
}

model BookHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String   @db.ObjectId
  action    String // "CREATED", "UPDATED", "BORROWED", "RETURNED"
  userId    String?  @db.ObjectId // User who performed the action
  oldData   String? // JSON string of previous state
  newData   String? // JSON string of current state
  timestamp DateTime @default(now())
}

// System Settings
model Settings {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  key         String      @unique
  value       String
  description String?
  type        SettingType @default(STRING)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Enums
enum UserRole {
  ADMIN
  LIBRARIAN
  USER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  RETURNED
  OVERDUE
}

enum NotificationType {
  INFO
  WARNING
  ALERT
  CUSTOM
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}
