// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  name            String
  password        String
  role            Role     @default(MEMBER)
  membershipId    String?  @unique
  phoneNumber     String?
  address         String?
  profileImage    String?
  isActive        Boolean  @default(true)
  joinDate        DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  borrowRequests   BorrowRequest[]
  borrowedBooks    BorrowedBook[]
  favorites        Favorite[]
  notifications    Notification[]
  fines            Fine[]

  @@map("users")
}

model Book {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  author        String
  category      String
  image         String
  rating        Float    @default(0)
  description   String
  publishYear   Int
  isbn          String   @unique
  pages         Int
  language      String
  publisher     String
  edition       String
  subjects      String[]
  location      String
  callNumber    String   @unique
  format        String
  price         String
  totalCopies   Int
  availableCopies Int
  borrowedCopies  Int    @default(0)
  reservedCopies  Int    @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  borrowRequests BorrowRequest[]
  borrowedBooks  BorrowedBook[]
  favorites      Favorite[]

  @@map("books")
}

model BorrowRequest {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  bookId          String        @db.ObjectId
  status          RequestStatus @default(PENDING)
  requestDate     DateTime      @default(now())
  requestedDays   Int           @default(14)
  adminResponse   String?
  adminId         String?       @db.ObjectId
  responseDate    DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  book            Book          @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("borrow_requests")
}

model BorrowedBook {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  bookId          String        @db.ObjectId
  borrowDate      DateTime      @default(now())
  dueDate         DateTime
  returnDate      DateTime?
  status          BorrowStatus  @default(BORROWED)
  renewalCount    Int           @default(0)
  maxRenewals     Int           @default(2)
  requestId       String?       @db.ObjectId
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  book            Book          @relation(fields: [bookId], references: [id], onDelete: Cascade)
  fines           Fine[]

  @@map("borrowed_books")
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  bookId    String   @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("favorites")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Fine {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  userId          String       @db.ObjectId
  borrowedBookId  String       @db.ObjectId
  amount          Float
  reason          String
  status          FineStatus   @default(PENDING)
  issuedDate      DateTime     @default(now())
  paidDate        DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  borrowedBook    BorrowedBook @relation(fields: [borrowedBookId], references: [id], onDelete: Cascade)

  @@map("fines")
}

enum Role {
  ADMIN
  LIBRARIAN
  MEMBER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum BorrowStatus {
  BORROWED
  RETURNED
  OVERDUE
  LOST
}

enum NotificationType {
  BORROW_REQUEST
  BORROW_APPROVED
  BORROW_REJECTED
  RETURN_REMINDER
  OVERDUE_NOTICE
  FINE_ISSUED
  FINE_PAID
  GENERAL
}

enum FineStatus {
  PENDING
  PAID
  WAIVED
}
